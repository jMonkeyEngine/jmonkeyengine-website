{
    "responseTitle":"jMonkeyEngine  | Quick Start",
    "apiVersion":"1.0",
    "response":"defaultEntry",
    "uid":"e35225681628e09bab23f7b8fd7299b1",

    "title":"Quick Start",
    "content":"\u003cstyle\u003e\n    #qsbuttons{ \n        text-align:center;\n    }\n    #qsbuttons \u003e p{\n        display:flex;\n        align-items:center;\n        justify-content:center;\n    }\n\n    .qsbtn{\n      flex-grow: 1\n        \n    }\n    #jme-initializer{\n        margin-top:1em;\n        border:none;\n    }\n\u003c/style\u003e\n\u003cscript\u003e\nfunction showSubPage(id){\n    const subpages=document.querySelectorAll(\".qspage\");\n    subpages.forEach(sp=\u003esp.style.display=\"none\");\n    const selectedSubPage=document.querySelector(\".qspage#\"+id);\n    selectedSubPage.style.display=\"block\";\n\n    const buttons=document.querySelectorAll(\"button.qsbtn\");\n    buttons.forEach(el=\u003eel.classList.remove(\"highlightedCl\"));\n    \n    const selectedBtn=document.querySelector(\"button#\"+id+\"Btn\");\n    selectedBtn.classList.add(\"highlightedCl\");\n}\n\u003c/script\u003e\n\u003cdiv id=\"qsbuttons\" style=\"text-align:center\"\u003e\njMonkeyEngine is not bound to any specific IDE or SDK and it can be used as any other java library.\n\u003cbr\u003e\nThere are several ways to start a project with jMonkeyEngine:\n\u003cbr\u003e\u003cbr\u003e\n\u003cp\u003e\u003cbutton id=\"qsinitializerBtn\" class=\"highlightedCl qsbtn\" onclick=\"showSubPage('qsinitializer')\"\u003eThe Initializer\u003c/button\u003e\u003cbr\u003e\n\u003cbutton  class=\"qsbtn\" id=\"qssdkBtn\"  onclick=\"showSubPage('qssdk')\"\u003eThe SDK\u003c/button\u003e\u003cbr\u003e\n\u003cbutton class=\"qsbtn\"  id=\"qscustomBtn\" onclick=\"showSubPage('qscustom')\" \u003eDIY\u003c/button\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003chr\u003e\n\u003cdiv class=\"qspage\" id=\"qssdk\" style=\"display:none\"\u003e\n\u003cp\u003eUsing the Netbeans-based SDK is by far the quickest solution to get you up and running. Everything needed is provided, along with extra tools and integrations, and is generally the place most users start their endevour. \u003ca href=\"https://github.com/jMonkeyEngine/sdk/releases\"\u003eDownload the SDK\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"qspage\" id=\"qsinitializer\" style=\"text-align:center;display:block\"\u003e\n\u003cp\u003eThe initializer is a convenient online tool that build a starter gradle script and template for your application.\u003cbr\u003e\nYou can access the tool directly from \u003ca href=\"https://start.jmonkeyengine.org\"\u003ehere\u003c/a\u003e or use the embedded version below.\u003c/p\u003e\n\u003ciframe id=\"jme-initializer\" \n    style=\"width:100%;height:800px;\" \n    src=\"https://start.jmonkeyengine.org\"\n\u003e\u003c/iframe\u003e\n\u003cscript\u003e\n    const iframe=document.querySelector(\"#jme-initializer\");\n    if(iframe){\n        iframe.src=iframe.src+\"?rnd=\"+Math.random()+\"\u0026time=\"+Date.now(); // avoid caching\n        window.addEventListener(\"message\",(msg)=\u003e{\n            try{\n                const event=JSON.parse(msg.data);\n                if(event.name==\"jme-initializer-resize\"){\n                    const height=event.height;\n                    document.querySelector(\"#jme-initializer\").style.height = height + 'px';\n                }else if(event.name==\"jme-initializer-scrollToTop\"){\n                    const el=document.querySelector(\"#jme-initializer\");\n                    window.scrollToElement(el);\n                }     \n            }catch(e){\n                console.log(e);\n            }\n            \n        });\n\n\n    }\n\u003c/script\u003e\n\u003c/div\u003e\n\u003cdiv class=\"qspage\" id=\"qscustom\" style=\"display:none\"\u003e\n\u003cp\u003eThe engine itself and its dependencies can be downloaded from \u003ca href=\"https://github.com/jMonkeyEngine/jmonkeyengine/releases\"\u003ethe releases page\u003c/a\u003e and used as any other java library.\u003c/p\u003e\n\u003cp\u003eIf you prefer to use a build automation tool, you can find the engine hosted on the \u003ca href=\"https://mvnrepository.com/artifact/org.jmonkeyengine\"\u003eMaven Central Repository\u003c/a\u003e. This is the most common approach for users that use an IDE or editor that supports maven or gradle build scripts (such as \u003ca href=\"https://www.jetbrains.com/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e or \u003ca href=\"https://code.visualstudio.com/\"\u003eVisual Studio Code\u003c/a\u003e ).\u003c/p\u003e\n\u003cp\u003eThe code below shows how to include the bare minimum to use the jMonkeyEngine in your gradle project\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-groovy\"\u003erepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \u0026quot;org.jmonkeyengine:jme3-core:3.3.2-stable\u0026quot;\n    implementation \u0026quot;org.jmonkeyengine:jme3-desktop:3.3.2-stable\u0026quot;\n    implementation \u0026quot;org.jmonkeyengine:jme3-lwjgl3:3.3.2-stable\u0026quot; \n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"creating-a-game\"\u003eCreating a Game\u003c/h2\u003e\n\u003cp\u003eAll games created with jmonkey start by extending \u003ccode\u003eSimpleApplication\u003c/code\u003e. Below is the most basic setup required to start your game and show a cube.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-java\"\u003epackage my.game;\n\nimport com.jme3.app.SimpleApplication;\nimport com.jme3.material.Material;\nimport com.jme3.math.ColorRGBA;\nimport com.jme3.scene.Geometry;\nimport com.jme3.scene.shape.Box;\nimport com.jme3.system.AppSettings;\n\npublic class Main extends SimpleApplication {\n\n    public static void main(String[] args) {\n\n        Main app = new Main();\n\n        AppSettings settings = new AppSettings(true);\n        settings.setTitle(\u0026quot;My Awesome Game\u0026quot;);\n        app.setSettings(settings);\n\n        app.start();\n\n    }\n\n    @Override\n    public void simpleInitApp() {\n\n        Box b = new Box(1, 1, 1);\n        Geometry geom = new Geometry(\u0026quot;Box\u0026quot;, b);\n\n        Material mat = new Material(assetManager, \u0026quot;Common/MatDefs/Misc/Unshaded.j3md\u0026quot;);\n        mat.setColor(\u0026quot;Color\u0026quot;, ColorRGBA.Blue);\n        geom.setMaterial(mat);\n\n        rootNode.attachChild(geom);\n\n    }\n\n    @Override\n    public void simpleUpdate(float tpf) {\n        //TODO: add update code\n    }\n\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning this class will start your first game and display a blue box on the screen, and you can move around using your mouse and WASD keys. Congratulations! You\u0026rsquo;re running your first JME game!\u003c/p\u003e\n\u003cp\u003eFor a more thorough tutorial on jMonkey browse through our \u003ca href=\"https://wiki.jmonkeyengine.org\"\u003ewiki\u003c/a\u003e. The wiki provides extended documentation as well as tutorials on how to develop your game effectively using jmonkey practices. Tutorials start from the basics all the way up to collision detection, input mapping and shaders, and will be your go-to place for most of the information you require.\u003c/p\u003e\n\u003cp\u003eIf you ever find yourself confused or wondering how something is done, head over to our \u003ca href=\"https://hub.jmonkeyengine.org\"\u003ecommunity hub\u003c/a\u003e and create a new thread. Our ultra-helpful team and community will be more than happy to give you a hand in getting you back on track.\u003c/p\u003e\n\u003c/div\u003e\n",
    "contentPlain":" jMonkeyEngine is not bound to any specific IDE or SDK and it can be used as any other java library. There are several ways to start a project with jMonkeyEngine: The Initializer\nThe SDK\nDIY\nUsing the Netbeans-based SDK is by far the quickest solution to get you up and running. Everything needed is provided, along with extra tools and integrations, and is generally the place most users start their endevour. Download the SDK.\nThe initializer is a convenient online tool that build a starter gradle script and template for your application.\nYou can access the tool directly from here or use the embedded version below.\nThe engine itself and its dependencies can be downloaded from the releases page and used as any other java library.\nIf you prefer to use a build automation tool, you can find the engine hosted on the Maven Central Repository. This is the most common approach for users that use an IDE or editor that supports maven or gradle build scripts (such as IntelliJ IDEA or Visual Studio Code ).\nThe code below shows how to include the bare minimum to use the jMonkeyEngine in your gradle project\nrepositories { mavenCentral() } dependencies { implementation \u0026quot;org.jmonkeyengine:jme3-core:3.3.2-stable\u0026quot; implementation \u0026quot;org.jmonkeyengine:jme3-desktop:3.3.2-stable\u0026quot; implementation \u0026quot;org.jmonkeyengine:jme3-lwjgl3:3.3.2-stable\u0026quot; } Creating a Game All games created with jmonkey start by extending SimpleApplication. Below is the most basic setup required to start your game and show a cube.\npackage my.game; import com.jme3.app.SimpleApplication; import com.jme3.material.Material; import com.jme3.math.ColorRGBA; import com.jme3.scene.Geometry; import com.jme3.scene.shape.Box; import com.jme3.system.AppSettings; public class Main extends SimpleApplication { public static void main(String[] args) { Main app = new Main(); AppSettings settings = new AppSettings(true); settings.setTitle(\u0026quot;My Awesome Game\u0026quot;); app.setSettings(settings); app.start(); } @Override public void simpleInitApp() { Box b = new Box(1, 1, 1); Geometry geom = new Geometry(\u0026quot;Box\u0026quot;, b); Material mat = new Material(assetManager, \u0026quot;Common/MatDefs/Misc/Unshaded.j3md\u0026quot;); mat.setColor(\u0026quot;Color\u0026quot;, ColorRGBA.Blue); geom.setMaterial(mat); rootNode.attachChild(geom); } @Override public void simpleUpdate(float tpf) { //TODO: add update code } } Running this class will start your first game and display a blue box on the screen, and you can move around using your mouse and WASD keys. Congratulations! You\u0026rsquo;re running your first JME game!\nFor a more thorough tutorial on jMonkey browse through our wiki. The wiki provides extended documentation as well as tutorials on how to develop your game effectively using jmonkey practices. Tutorials start from the basics all the way up to collision detection, input mapping and shaders, and will be your go-to place for most of the information you require.\nIf you ever find yourself confused or wondering how something is done, head over to our community hub and create a new thread. Our ultra-helpful team and community will be more than happy to give you a hand in getting you back on track.\n" ,
    "url":"https://jmonkeyengine.org/start/",


    
    "summary":"jMonkeyEngine is not bound to any specific IDE or SDK and it can be used as any other java library. There are several ways to start a project with jMonkeyEngine: The Initializer\nThe SDK\nDIY\nUsing the Netbeans-based SDK is by far the quickest solution to get you up and running. Everything needed is provided, along with extra tools and integrations, and is generally the place most users start their endevour."   ,
    
    "tags":[
        
        ],
        "authors":[
            
            ]


}