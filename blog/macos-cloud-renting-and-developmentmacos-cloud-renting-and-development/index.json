{
    "responseTitle":"jMonkeyEngine  | MacOS renting and development in the cloud",
    "apiVersion":"1.0",
    "response":"defaultEntry",
    "uid":"216bb60484ef5c87b6389f5f2849a79b",

    "title":"MacOS renting and development in the cloud",
    "content":"\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150141802-2e082357-7422-4405-b066-88947bf28642.png\" alt=\"Screenshot_20220119_143808\"\u003e\u003c/p\u003e\n\u003cp\u003eMacOS cloud renting has started to proliferate with the new Apple Silicon M1 chip and it turned out to be a pretty decent way to test graphical applications on MacOS without buying apple\u0026rsquo;s pricey hardware or resorting to hackish ports and vms of questionable legality.\u003c/p\u003e\n\u003cp\u003eI am reporting here the procedure to quickly get a MacOS M1 cloud service up and running for testing jmonkey applications without too much hassle.\u003c/p\u003e\n\u003cp\u003eThis guide focus on Apple Silicon M1 instances, but can be replicated on x86_64\u003c/p\u003e\n\u003ch3 id=\"1-finding-the-right-cloud-provider\"\u003e1. Finding the right cloud provider\u003c/h3\u003e\n\u003cp\u003eFirstly you are going to need to find a place where you can rent your cloud server.\u003cbr\u003e\nWe are going to need ssh, root and vnc access.\u003cbr\u003e\nI\u0026rsquo;ve been using  \u003ca href=\"https://www.scaleway.com/en/hello-m1/\"\u003ehttps://www.scaleway.com/en/hello-m1/\u003c/a\u003e with success. It is located in Paris, so people outside europe might want to find a local provider that has lower latency.\u003c/p\u003e\n\u003ch3 id=\"2-install-nomachine-client\"\u003e2. Install NoMachine Client\u003c/h3\u003e\n\u003cp\u003eThese instances usually come with VNC enabled by default. However I\u0026rsquo;ve found VNC performances to be pretty bad, especially for realtime applications, so we are going to replace it with a much better alternative called \u003ca href=\"https://nomachine.com\"\u003eNoMachine\u003c/a\u003e that has nearly-local performances (tested on a 100Mb connection) and sound support.\u003c/p\u003e\n\u003cp\u003eSo for start you are going to need to install the client (that we will use later) in your local machine, you can use one of the following links:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.nomachine.com/download\"\u003eNoMachine (community edition)\u003c/a\u003e : Client+Server single app\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.nomachine.com/product\u0026amp;p=NoMachine%20Enterprise%20Client\"\u003eNoMachine Enterprise Client\u003c/a\u003e: Client only\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-spawn-an-instance-and-get-access-credentials\"\u003e3. Spawn an instance and get access credentials\u003c/h3\u003e\n\u003cp\u003eNow we can start with the server: spawn a new instance on the provider you\u0026rsquo;ve found before and then collect the following access infos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003einstance ip\u003c/li\u003e\n\u003cli\u003eusername\u003c/li\u003e\n\u003cli\u003epassword\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you rented from Scaleway, you can get all those infos from the instance dashboard that should look something like this\u003cbr\u003e\n\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150140692-afa252df-0214-4d1d-abe8-bdc36cc38468.png\" alt=\"image\"\u003e\u003c/p\u003e\n\u003cp\u003eNote: VNCPassword is also the user account password and the ssh user \u003cstrong\u003em1\u003c/strong\u003e is also the user account name\u003c/p\u003e\n\u003ch3 id=\"4-ssh-into-the-newly-created-instance\"\u003e4. Ssh into the newly created instance\u003c/h3\u003e\n\u003cp\u003eIf you are on linux chances are that you have already an ssh client installed, so  you can just call\u003cbr\u003e\n\u003ccode\u003essh m1@your.instance.ip.address\u003c/code\u003e\u003cbr\u003e\nfrom the command line.\u003cbr\u003e\nOn windows you can use something like PuTTY, if you have never done that before you can follow this guide: \u003ca href=\"https://tomjorge.me/how-do-i-connect-to-my-scaleway-cloud-instance-via-windows/\"\u003ehttps://tomjorge.me/how-do-i-connect-to-my-scaleway-cloud-instance-via-windows/\u003c/a\u003e (it\u0026rsquo;s the same for other providers).\u003c/p\u003e\n\u003ch3 id=\"5-install-the-required-software-on-the-server-instance\"\u003e5. Install the required software on the server instance\u003c/h3\u003e\n\u003cp\u003eTo have a working jme dev environment we are going to need the following software:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHomebrew Package Manager\u003c/strong\u003e : It will make software installation easier\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJava11\u003c/strong\u003e: Java \u0026lt;= 8 has issues on mac\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVisual Studio Code with java extensions\u003c/strong\u003e: lightweight editor  (this is my editor of choice, but you can use your favorite one)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNoMachine\u003c/strong\u003e: Remote access server\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following script does all that for you.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eNote\u003c/em\u003e: you will be asked to input the password you got in point 3\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eNote2\u003c/em\u003e: There is an issue with audio driver installation in MacOS 12 and NoMachine 7.7.4, the script applies a workaround, if your instance doesn\u0026rsquo;t have the affected software you can disable the workaround by commenting the \u003ccode\u003eIS_MACOS12=\u0026quot;1\u0026quot;\u003c/code\u003e line.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eNote3\u003c/em\u003e:  if your instance is x86_64: comment the Apple Silicon JAVA_URL and uncomment the x86_64 url\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eIS_MACOS12=\u0026quot;1\u0026quot;\nNO_MACHINE_URL=\u0026quot;https://download.nomachine.com/download/7.7/MacOSX/nomachine_7.7.4_1.dmg\u0026quot;\n\n#For Apple Silicon M1\nJAVA_URL=\u0026quot;https://cdn.azul.com/zulu/bin/zulu11.54.23-ca-jdk11.0.14-macosx_aarch64.dmg\u0026quot; \n\n# For x86 64 bit\n#JAVA_URL=\u0026quot;https://cdn.azul.com/zulu/bin/zulu11.54.23-ca-jdk11.0.14-macosx_x64.dmg\u0026quot; \n\n# Download no machine\ncd /tmp\ncurl \u0026quot;$NO_MACHINE_URL\u0026quot; -o nomachine.dmg\n\n\n# Install\nhdiutil mount nomachine.dmg\ncd /Volumes/NoMachine\nsudo installer -pkg NoMachine.pkg -target /\ncd /tmp\n\n# Download and install homebrew packet manager\n/bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026quot;\n\necho 'eval \u0026quot;$(/opt/homebrew/bin/brew shellenv)\u0026quot;' \u0026gt;\u0026gt; $HOME/.zprofile\neval \u0026quot;$(/opt/homebrew/bin/brew shellenv)\u0026quot;\n    \n# Install OpenJDK11\ncd /tmp\ncurl \u0026quot;$JAVA_URL\u0026quot; -o java.dmg\nhdiutil mount java.dmg\ncd /Volumes/Azul\\ Zulu\\ JDK*\nsudo installer -pkg *Zulu*.pkg -target /\n\n\n# Install Visual Studio Code\nbrew install --cask visual-studio-code\n\n\n# Workaround for audio not working in MacOS 12 (https://knowledgebase.nomachine.com/TR12S10423)\nif [ \u0026quot;$IS_MACOS12\u0026quot; = \u0026quot;1\u0026quot; ];\nthen\n    sudo rm -rf /Library/Extensions/nxaudio.kext /Library/Audio/Plug-Ins/HAL/NMAudio.driver /Library/Audio/Plug-Ins/HAL/NMAudioMic.driver\n    sudo mkdir -p /Library/Audio/Plug-Ins/HAL/\n\n    sudo cp -a /Applications/NoMachine.app/Contents/Frameworks/bin/drivers/NMAudio.driver    /Library/Audio/Plug-Ins/HAL/NMAudio.driver\n    sudo cp -a /Applications/NoMachine.app/Contents/Frameworks/bin/drivers/NMAudioMic.driver /Library/Audio/Plug-Ins/HAL/NMAudioMic.driver\n\n    sudo chmod -R 755 /Library/Audio/Plug-Ins/HAL/NMAudio*\n    sudo chown -R \u0026quot;root:wheel\u0026quot; /Library/Audio/Plug-Ins/HAL/NMAudio*\n    \n    sudo launchctl stop com.apple.audio.coreaudiod\n    sudo launchctl start com.apple.audio.coreaudiod\nfi\n\n\n# Restart everything\nsudo reboot\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"6-grant-the-permissions\"\u003e6. Grant the permissions\u003c/h3\u003e\n\u003cp\u003eNow we need to grant the required permissions to NoMachine Server (nxnode).\u003cbr\u003e\nThis is the most annoying part, since it cannot be done from the command line but it has to be done manually from the UI with VNC.\u003c/p\u003e\n\u003cp\u003eSo, log into your instance with VNC. If you are familiar with VNC, you\u0026rsquo;ll know what to do, if not, this is the relevant tutorial  \u003ca href=\"https://www.scaleway.com/en/docs/compute/apple-silicon/how-to/connect-to-mac-mini-m1/\"\u003e How to connect to a Mac mini M1 | Scaleway\u003c/a\u003e .\u003cbr\u003e\nFor convenience here a list of VNC clients:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.tightvnc.com/\"\u003eTightVNC\u003c/a\u003e: Windows/Linux\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://apps.kde.org/krdc/\"\u003eKRDC\u003c/a\u003e: Linux+kde  (this is the client i\u0026rsquo;ve been using while writing this guide)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://remmina.org/\"\u003eRemmina\u003c/a\u003e: Linux\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.realvnc.com\"\u003eRealVNC\u003c/a\u003e : Windows/Linux\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce you are logged into MacOS, you need to go in Menu -\u0026gt; System preferences\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150140737-290aca3d-fcc1-4137-aa0a-16af3f428bb7.png\" alt=\"image\"\u003e\u003c/p\u003e\n\u003cp\u003eFrom there you need to go in \u003cstrong\u003eSecurity \u0026amp; Privacy\u003c/strong\u003e -\u0026gt; \u003cstrong\u003ePrivacy\u003c/strong\u003e\u003cbr\u003e\nClick the lock icon and input the password.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150140767-3c6c9d41-f059-4306-b04d-049094add5e1.png\" alt=\"image\"\u003e\u003c/p\u003e\n\u003cp\u003eNow you need to enable the following permissions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAccessibility\u003c/li\u003e\n\u003cli\u003eFull Disk Access\u003c/li\u003e\n\u003cli\u003eMicrophone\u003c/li\u003e\n\u003cli\u003eScreen Recording\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNote: Some permissions might not be recorded immediately, you might need to attempt to connect with NoMachine client once before they appear in Security\u0026amp;Privacy.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSee images below:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150140816-6032181f-b304-4838-b720-347abdf6ebb6.png\" alt=\"image\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150140847-6ada472c-e0cb-4dfb-84b1-09d7c1e8aedb.png\" alt=\"image\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150140852-69df9de7-327f-4ca1-8678-f44ce4d7598b.png\" alt=\"image\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4943530/150140865-1c4b458e-4e12-4ce7-92b6-9827a76582c0.png\" alt=\"image\"\u003e\u003c/p\u003e\n\u003ch3 id=\"7-done\"\u003e7. Done\u003c/h3\u003e\n\u003cp\u003eNow you are good to go, you can close VNC, connect directly with NoMachine and start your development and testing.\u003cbr\u003e\nIf you use Visual Studio Code as editor, you will need to open it and install the \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack\"\u003ejava extension pack\u003c/a\u003e.\u003c/p\u003e\n",
    "contentPlain":"\nMacOS cloud renting has started to proliferate with the new Apple Silicon M1 chip and it turned out to be a pretty decent way to test graphical applications on MacOS without buying apple\u0026rsquo;s pricey hardware or resorting to hackish ports and vms of questionable legality.\nI am reporting here the procedure to quickly get a MacOS M1 cloud service up and running for testing jmonkey applications without too much hassle.\nThis guide focus on Apple Silicon M1 instances, but can be replicated on x86_64\n1. Finding the right cloud provider Firstly you are going to need to find a place where you can rent your cloud server.\nWe are going to need ssh, root and vnc access.\nI\u0026rsquo;ve been using https://www.scaleway.com/en/hello-m1/ with success. It is located in Paris, so people outside europe might want to find a local provider that has lower latency.\n2. Install NoMachine Client These instances usually come with VNC enabled by default. However I\u0026rsquo;ve found VNC performances to be pretty bad, especially for realtime applications, so we are going to replace it with a much better alternative called NoMachine that has nearly-local performances (tested on a 100Mb connection) and sound support.\nSo for start you are going to need to install the client (that we will use later) in your local machine, you can use one of the following links:\nNoMachine (community edition) : Client+Server single app NoMachine Enterprise Client: Client only 3. Spawn an instance and get access credentials Now we can start with the server: spawn a new instance on the provider you\u0026rsquo;ve found before and then collect the following access infos:\ninstance ip username password If you rented from Scaleway, you can get all those infos from the instance dashboard that should look something like this\nNote: VNCPassword is also the user account password and the ssh user m1 is also the user account name\n4. Ssh into the newly created instance If you are on linux chances are that you have already an ssh client installed, so you can just call\nssh m1@your.instance.ip.address\nfrom the command line.\nOn windows you can use something like PuTTY, if you have never done that before you can follow this guide: https://tomjorge.me/how-do-i-connect-to-my-scaleway-cloud-instance-via-windows/ (it\u0026rsquo;s the same for other providers).\n5. Install the required software on the server instance To have a working jme dev environment we are going to need the following software:\nHomebrew Package Manager : It will make software installation easier Java11: Java \u0026lt;= 8 has issues on mac Visual Studio Code with java extensions: lightweight editor (this is my editor of choice, but you can use your favorite one) NoMachine: Remote access server The following script does all that for you.\nNote: you will be asked to input the password you got in point 3 Note2: There is an issue with audio driver installation in MacOS 12 and NoMachine 7.7.4, the script applies a workaround, if your instance doesn\u0026rsquo;t have the affected software you can disable the workaround by commenting the IS_MACOS12=\u0026quot;1\u0026quot; line. Note3: if your instance is x86_64: comment the Apple Silicon JAVA_URL and uncomment the x86_64 url IS_MACOS12=\u0026quot;1\u0026quot; NO_MACHINE_URL=\u0026quot;https://download.nomachine.com/download/7.7/MacOSX/nomachine_7.7.4_1.dmg\u0026quot; #For Apple Silicon M1 JAVA_URL=\u0026quot;https://cdn.azul.com/zulu/bin/zulu11.54.23-ca-jdk11.0.14-macosx_aarch64.dmg\u0026quot; # For x86 64 bit #JAVA_URL=\u0026quot;https://cdn.azul.com/zulu/bin/zulu11.54.23-ca-jdk11.0.14-macosx_x64.dmg\u0026quot; # Download no machine cd /tmp curl \u0026quot;$NO_MACHINE_URL\u0026quot; -o nomachine.dmg # Install hdiutil mount nomachine.dmg cd /Volumes/NoMachine sudo installer -pkg NoMachine.pkg -target / cd /tmp # Download and install homebrew packet manager /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026quot; echo 'eval \u0026quot;$(/opt/homebrew/bin/brew shellenv)\u0026quot;' \u0026gt;\u0026gt; $HOME/.zprofile eval \u0026quot;$(/opt/homebrew/bin/brew shellenv)\u0026quot; # Install OpenJDK11 cd /tmp curl \u0026quot;$JAVA_URL\u0026quot; -o java.dmg hdiutil mount java.dmg cd /Volumes/Azul\\ Zulu\\ JDK* sudo installer -pkg *Zulu*.pkg -target / # Install Visual Studio Code brew install --cask visual-studio-code # Workaround for audio not working in MacOS 12 (https://knowledgebase.nomachine.com/TR12S10423) if [ \u0026quot;$IS_MACOS12\u0026quot; = \u0026quot;1\u0026quot; ]; then sudo rm -rf /Library/Extensions/nxaudio.kext /Library/Audio/Plug-Ins/HAL/NMAudio.driver /Library/Audio/Plug-Ins/HAL/NMAudioMic.driver sudo mkdir -p /Library/Audio/Plug-Ins/HAL/ sudo cp -a /Applications/NoMachine.app/Contents/Frameworks/bin/drivers/NMAudio.driver /Library/Audio/Plug-Ins/HAL/NMAudio.driver sudo cp -a /Applications/NoMachine.app/Contents/Frameworks/bin/drivers/NMAudioMic.driver /Library/Audio/Plug-Ins/HAL/NMAudioMic.driver sudo chmod -R 755 /Library/Audio/Plug-Ins/HAL/NMAudio* sudo chown -R \u0026quot;root:wheel\u0026quot; /Library/Audio/Plug-Ins/HAL/NMAudio* sudo launchctl stop com.apple.audio.coreaudiod sudo launchctl start com.apple.audio.coreaudiod fi # Restart everything sudo reboot 6. Grant the permissions Now we need to grant the required permissions to NoMachine Server (nxnode).\nThis is the most annoying part, since it cannot be done from the command line but it has to be done manually from the UI with VNC.\nSo, log into your instance with VNC. If you are familiar with VNC, you\u0026rsquo;ll know what to do, if not, this is the relevant tutorial How to connect to a Mac mini M1 | Scaleway .\nFor convenience here a list of VNC clients:\nTightVNC: Windows/Linux KRDC: Linux+kde (this is the client i\u0026rsquo;ve been using while writing this guide) Remmina: Linux RealVNC : Windows/Linux Once you are logged into MacOS, you need to go in Menu -\u0026gt; System preferences\nFrom there you need to go in Security \u0026amp; Privacy -\u0026gt; Privacy\nClick the lock icon and input the password.\nNow you need to enable the following permissions:\nAccessibility Full Disk Access Microphone Screen Recording Note: Some permissions might not be recorded immediately, you might need to attempt to connect with NoMachine client once before they appear in Security\u0026amp;Privacy.\nSee images below:\n7. Done Now you are good to go, you can close VNC, connect directly with NoMachine and start your development and testing.\nIf you use Visual Studio Code as editor, you will need to open it and install the java extension pack.\n" ,
    "url":"https://jmonkeyengine.org/blog/macos-cloud-renting-and-developmentmacos-cloud-renting-and-development/",


    
    "summary":"MacOS cloud renting has started to proliferate with the new Apple Silicon M1 chip and it turned out to be a pretty decent way to test graphical applications on MacOS without buying apple\u0026rsquo;s pricey hardware or resorting to hackish ports and vms of questionable legality.\nI am reporting here the procedure to quickly get a MacOS M1 cloud service up and running for testing jmonkey applications without too much hassle."   ,
    
    "tags":[
        
             
             "tutorials"
        
              , 
             "blog"
        
              , 
             "misc"
        
        ],
        "authors":[
            
                 
                 "riccardobl"
            
            ]


}